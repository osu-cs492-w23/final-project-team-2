// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.eivom.`data`

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class MovieListJsonJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<MovieListJson>() {
  private val options: JsonReader.Options = JsonReader.Options.of("title", "overview",
      "poster_path", "release_date", "genre")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "title")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "poster_path")

  private val listOfIntAdapter: JsonAdapter<List<Int>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Int::class.javaObjectType),
      emptySet(), "genre")

  public override fun toString(): String = buildString(35) {
      append("GeneratedJsonAdapter(").append("MovieListJson").append(')') }

  public override fun fromJson(reader: JsonReader): MovieListJson {
    var title: String? = null
    var overview: String? = null
    var poster_path: String? = null
    var release_date: String? = null
    var genre: List<Int>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        1 -> overview = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("overview",
            "overview", reader)
        2 -> poster_path = nullableStringAdapter.fromJson(reader)
        3 -> release_date = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("release_date", "release_date", reader)
        4 -> genre = listOfIntAdapter.fromJson(reader) ?: throw Util.unexpectedNull("genre",
            "genre", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return MovieListJson(
        title = title ?: throw Util.missingProperty("title", "title", reader),
        overview = overview ?: throw Util.missingProperty("overview", "overview", reader),
        poster_path = poster_path,
        release_date = release_date ?: throw Util.missingProperty("release_date", "release_date",
            reader),
        genre = genre ?: throw Util.missingProperty("genre", "genre", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: MovieListJson?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("title")
    stringAdapter.toJson(writer, value_.title)
    writer.name("overview")
    stringAdapter.toJson(writer, value_.overview)
    writer.name("poster_path")
    nullableStringAdapter.toJson(writer, value_.poster_path)
    writer.name("release_date")
    stringAdapter.toJson(writer, value_.release_date)
    writer.name("genre")
    listOfIntAdapter.toJson(writer, value_.genre)
    writer.endObject()
  }
}
